package com.tsystems.rehaklinik.util;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.tsystems.rehaklinik.dto.ClinicalDiagnosisDTO;
import com.tsystems.rehaklinik.dto.MedicalRecordDTO;
import com.tsystems.rehaklinik.dto.TreatmentEventDTO;
import com.tsystems.rehaklinik.services.DoctorService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.InputStreamSource;
import org.springframework.stereotype.Component;

import java.io.ByteArrayOutputStream;
import java.time.LocalDateTime;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Generates PDF reports
 *
 * @author Julia Dalskaya
 */
@Component
public class PDFGenerator {

    private static Logger logger = LoggerFactory.getLogger(PDFGenerator.class);

    private final DoctorService doctorService;

    private static final Font TITLE_FONT = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
    private static final Font SUB_FONT = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
    private static final Font SMALL_BOLD = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
    private static final Font PLAIN_FONT = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);


    public  InputStreamSource generatePDF(int patientId, String patientName) {
        logger.info("MedHelper_LOGS: In PDFGenerator: starting to generate a PDF");
        Document pdf = new Document(PageSize.A4.rotate());
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {

            PdfWriter.getInstance(pdf, out);
            pdf.open();
            addMetaData(pdf);
            addContent(pdf, patientId, patientName);
            pdf.close();
        } catch (Exception exception) {
            logger.error("MedHelper_LOGS: In PDFGenerator: Error occurred while creating a PDF file ---> ",
                    exception.fillInStackTrace());
        }
        return new ByteArrayResource(out.toByteArray());
    }


    /**
     * Adds content to a PDF document
     *
     * @param patientId patient's id
     * @param name      patient's name
     */
    private void addContent(Document pdf, int patientId, String name) throws DocumentException {
        MedicalRecordDTO medicalRecordDTO = doctorService.getMedicalRecord(patientId);
        List<TreatmentEventDTO> treatmentEventDTOS = doctorService.findTreatmentEventsByPatientId(patientId);

        Paragraph paragraph = new Paragraph();
        paragraph.add(new Paragraph("Treatment details for patient " + name, TITLE_FONT));
        addEmptyLine(paragraph, 1);
        paragraph.add(new Paragraph("Report generated by Rehaklinik MedHelper, " + LocalDateTime.now(), SMALL_BOLD));
        addEmptyLine(paragraph, 2);
        paragraph.add("Attending Doctor: " + medicalRecordDTO.getPatient().getAttendingDoctorId().getFirstName()
                + " " + medicalRecordDTO.getPatient().getAttendingDoctorId().getMiddleName()
                + " " + medicalRecordDTO.getPatient().getAttendingDoctorId().getSurname()
                + "\nPosition: " + medicalRecordDTO.getPatient().getAttendingDoctorId().getPosition()
                + "\nPhone: " + medicalRecordDTO.getPatient().getAttendingDoctorId().getPhoneNumber());
        addEmptyLine(paragraph, 1);
        createDiagnosisList(medicalRecordDTO, paragraph);
        paragraph.add(new Paragraph("Treatment Events:", SUB_FONT));
        addEmptyLine(paragraph, 1);
        pdf.add(paragraph);
        createTreatmentEventsTable(treatmentEventDTOS, pdf);
    }


    /**
     * Creates table with patient's treatment events
     *
     * @param treatmentEventDTOS list of patient's treatment events
     * @param pdf                generating PDF
     * @throws DocumentException DocumentException
     */
    private static void createTreatmentEventsTable(
            List<TreatmentEventDTO> treatmentEventDTOS, Document pdf) throws DocumentException {

        Set<String> rowHeaders = Stream.of("Id", "Time", "Date", "Status", "Cancel Reason", "Treatment",
                "Type", "Dose", "Method", "Start Period", "End Period").collect(Collectors.toCollection(LinkedHashSet::new));

        PdfPTable table = new PdfPTable(11);
        table.setWidthPercentage(100);

        for (String header : rowHeaders) {
            PdfPCell cell = new PdfPCell(new Phrase(header));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setBackgroundColor(new BaseColor(223, 255, 128));
            table.addCell(cell);
        }

        table.setHeaderRows(1);

        int counter = 1;
        for (TreatmentEventDTO tEvent : treatmentEventDTOS) {
            PdfPCell cell = new PdfPCell(new Phrase(String.valueOf(counter), PLAIN_FONT));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(tEvent.getTreatmentEventTime(), PLAIN_FONT));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(tEvent.getTreatmentEventDate(), PLAIN_FONT));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(tEvent.getTreatmentEventStatus().toString(), PLAIN_FONT));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(tEvent.getCancelReason(), PLAIN_FONT));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(tEvent.getMedicineProcedureName(), PLAIN_FONT));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(tEvent.getTreatmentType().toString(), PLAIN_FONT));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(tEvent.getDose(), PLAIN_FONT));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            if (tEvent.getAdministeringMedicationMethod().equals("&mdash;")) {
                table.addCell("");
            } else {
                cell = new PdfPCell(new Phrase(tEvent.getDose(), PLAIN_FONT));
                table.addCell(cell);
            }
            cell = new PdfPCell(new Phrase(tEvent.getTreatmentPeriodStartDate(), PLAIN_FONT));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase(tEvent.getTreatmentPeriodEndDate(), PLAIN_FONT));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
            counter++;
        }
        pdf.add(table);
    }


    /**
     * Creates list of diagnosis
     *
     * @param medicalRecordDTO MedicalRecordDTO
     * @param paragraph        Paragraph
     */
    private static void createDiagnosisList(MedicalRecordDTO medicalRecordDTO, Paragraph paragraph) {

        com.itextpdf.text.List pdfList = new com.itextpdf.text.List(false, false, 10);

        for (ClinicalDiagnosisDTO diagnosisDTO : medicalRecordDTO.getClinicalDiagnosis()) {
            paragraph.add(new Paragraph("Diagnosis:  ", SUB_FONT));
            pdfList.add(new ListItem("Main Disease: " + diagnosisDTO.getMainDisease()));
            pdfList.add(new ListItem("ICD-10 Code: " + diagnosisDTO.getIcd10Code()));
            if (!diagnosisDTO.getAccompanyingPathology().isEmpty()) {
                pdfList.add(new ListItem("Accompanying Pathology: " + diagnosisDTO.getAccompanyingPathology()));
            }
            if (!diagnosisDTO.getFullDiagnosisDescription().isEmpty()) {
                pdfList.add(new ListItem("Full Description: " + diagnosisDTO.getFullDiagnosisDescription()));
            }
            paragraph.add(pdfList);
            addEmptyLine(paragraph, 1);
        }
    }


    /**
     * Adds metadata to the PDF which can be viewed in PDF-viewer
     *
     * @param document pdf document
     */
    private static void addMetaData(Document document) {
        document.addTitle("Treatment Details");
        document.addAuthor("MedHelper");
        document.addCreator("MedHelper");
    }


    /**
     * Adds empty lines to document
     *
     * @param paragraph Paragraph
     * @param number    number of empty lines
     */
    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

    @Autowired
    public PDFGenerator(DoctorService doctorService) {
        this.doctorService = doctorService;
    }
}
